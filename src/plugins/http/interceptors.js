/**
 * Handling unauthorized error codes
 */
const unauthorizedCodes = [401, 403];

/**
 * Interceptor will catch global api errors
 * and form validations
 */
export default (http, store, router) => {
    http.interceptors.response.use(
        response => {
            return response;
        },

        /* Handle all error messages
        * generated by HTTP requests
        */
        error => {
            const { response } = error;

            /**
             *  Empty store errors
             */
            //store.commit("SET_FORM_ERRORS", {});

            /**
             * Form validation errors
             */
            // if (response.status == 422 && error.response.data && error.response.data.errors) {
            //     store.commit("SET_FORM_ERRORS", error.response.data.errors);
            // }

            /**
             * User is no longer authenticated or
             * does not have access to the resource
             */
            if (unauthorizedCodes.indexOf(response.status) > -1) {
                /**
                 * Display snackbar with message from API when available
                 */
                // if (response.data.info && response.data.info.message) {
                //     store.commit("DISPLAY_SNACKBAR", {
                //         show: true,
                //         message: response.data.info.message,
                //         type: "error"
                //     });
                // }

                /**
                 * Redirect on login page
                 */
                if (router.currentRoute.name !== "login") {
                    store
                        .dispatch("auth/logout")
                        .then(() => router.push({ name: "login" }));
                }
            }

            /**
             * Return rejected promise
             */
            return Promise.reject(error);
        }
    )
}